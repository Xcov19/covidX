apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose --file docker-compose.yml convert --out manifests/
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: postgres
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose --file docker-compose.yml convert --out manifests/
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: postgres
    spec:
      containers:
      - env:
        - name: ACCESS_TOKEN_METHOD
          valueFrom:
            configMapKeyRef:
              key: ACCESS_TOKEN_METHOD
              name: env
        - name: ALGOLIA_API_KEY
          valueFrom:
            configMapKeyRef:
              key: ALGOLIA_API_KEY
              name: env
        - name: ALGOLIA_APPLICATION_ID
          valueFrom:
            configMapKeyRef:
              key: ALGOLIA_APPLICATION_ID
              name: env
        - name: BAZEL_CACHE
          valueFrom:
            configMapKeyRef:
              key: BAZEL_CACHE
              name: env
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              key: DB_PORT
              name: env
        - name: DEBUG_ENV
          valueFrom:
            configMapKeyRef:
              key: DEBUG_ENV
              name: env
        - name: DEFAULT_PORT
          valueFrom:
            configMapKeyRef:
              key: DEFAULT_PORT
              name: env
        - name: DJANGO_ALLOWED_HOST
          valueFrom:
            configMapKeyRef:
              key: DJANGO_ALLOWED_HOST
              name: env
        - name: JWT_AUDIENCE
          valueFrom:
            configMapKeyRef:
              key: JWT_AUDIENCE
              name: env
        - name: POSTGRES_DB
          value: postgres
        - name: POSTGRES_DB_HOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_DB_HOST
              name: env
        - name: POSTGRES_DB_PORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_DB_PORT
              name: env
        - name: POSTGRES_HOST_AUTH_METHOD
          value: trust
        - name: POSTGRES_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_PASSWORD
              name: env
        - name: SECRET_KEY
          valueFrom:
            configMapKeyRef:
              key: SECRET_KEY
              name: env
        - name: SETTINGS_ENV
          valueFrom:
            configMapKeyRef:
              key: SETTINGS_ENV
              name: env
        - name: SOCIAL_AUTH_AUTH0_DOMAIN
          valueFrom:
            configMapKeyRef:
              key: SOCIAL_AUTH_AUTH0_DOMAIN
              name: env
        - name: SOCIAL_AUTH_AUTH0_KEY
          valueFrom:
            configMapKeyRef:
              key: SOCIAL_AUTH_AUTH0_KEY
              name: env
        - name: SOCIAL_AUTH_AUTH0_SECRET
          valueFrom:
            configMapKeyRef:
              key: SOCIAL_AUTH_AUTH0_SECRET
              name: env
        - name: SOCIAL_AUTH_TRAILING_SLASH
          valueFrom:
            configMapKeyRef:
              key: SOCIAL_AUTH_TRAILING_SLASH
              name: env
        image: postgres:latest
        imagePullPolicy: ""
        name: postgres
        ports:
        - containerPort: 5432
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/postgresql/data/
          name: pgdata
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
      - name: pgdata
        persistentVolumeClaim:
          claimName: pgdata
status: {}
